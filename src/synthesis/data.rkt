#lang racket

(provide test-cases cumulative-sum mk-random-data
         rand-8-4-4 rand-16-8-4-4 rand-8-8-8-8)

(require
 "./config.rkt"
 (only-in rosette/base/form/define define-symbolic*)
 (only-in rosette/base/core/bitvector bv)
 (only-in rosette/base/core/bool [@boolean? rosette-boolean?])
 )

(define (cumulative-sum l)
  (reverse (foldl (lambda (next acc) (cons (+ next (if (null? acc) 0 (car acc))) acc)) '() l)))

(define (mk-random-data n)
  (define maxi (expt 2 word-size))
  (build-list n (lambda (_) (cons (random maxi) (random total-cache-lines)))))

(define rand-8-4-4
  '((35212 . 3)
    (16242 . 9)
    (53474 . 10)
    (50550 . 1)
    (3817 . 6)
    (13097 . 4)
    (56578 . 1)
    (6661 . 7)
    (53494 . 9)
    (5830 . 7)
    (1911 . 13)
    (21823 . 9)
    (19560 . 6)
    (19749 . 14)
    (26616 . 12)
    (60014 . 11)
    (18870 . 5)
    (16321 . 9)
    (1987 . 3)
    (57136 . 9)
    (50031 . 0)
    (20612 . 12)
    (65449 . 14)
    (25785 . 0)
    (38372 . 4)
    (39437 . 10)
    (28855 . 1)
    (21296 . 9)
    (14382 . 7)
    (20229 . 8)
    (3468 . 15)
    (59819 . 7)
    (35915 . 2)
    (33276 . 7)
    (29053 . 4)
    (42504 . 5)
    (13168 . 3)
    (54904 . 4)
    (8282 . 7)
    (37963 . 4)
    (6603 . 6)
    (7912 . 15)
    (6273 . 1)
    (4376 . 12)
    (21462 . 5)
    (29716 . 0)
    (62691 . 3)
    (21890 . 7)
    (45417 . 14)
    (8261 . 14)
    (4449 . 13)
    (64061 . 1)
    (59739 . 13)
    (30913 . 15)
    (63041 . 4)
    (29832 . 3)
    (36389 . 9)
    (37807 . 8)
    (40971 . 8)
    (10915 . 9)
    (50148 . 0)
    (41099 . 10)
    (58154 . 14)
    (53826 . 11)))

(define rand-16-8-4-4
'((32403 . 2)
  (18171 . 8)
  (43828 . 27)
  (65183 . 8)
  (65524 . 31)
  (12342 . 1)
  (60422 . 16)
  (28508 . 13)
  (22488 . 26)
  (31680 . 1)
  (33224 . 12)
  (48075 . 12)
  (14043 . 9)
  (16177 . 28)
  (63589 . 21)
  (64211 . 25)
  (14739 . 8)
  (37978 . 6)
  (5766 . 29)
  (37165 . 24)
  (38625 . 31)
  (54892 . 2)
  (29968 . 6)
  (5057 . 23)
  (54039 . 18)
  (2936 . 23)
  (38527 . 29)
  (13360 . 8)
  (62138 . 4)
  (8926 . 10)
  (25860 . 2)
  (26356 . 26)
  (36601 . 19)
  (2878 . 3)
  (27806 . 1)
  (5620 . 27)
  (24484 . 14)
  (24067 . 4)
  (27476 . 6)
  (52931 . 10)
  (30777 . 31)
  (54305 . 18)
  (27028 . 17)
  (10439 . 17)
  (2248 . 3)
  (24051 . 23)
  (3916 . 6)
  (51549 . 1)
  (43620 . 25)
  (5644 . 16)
  (44642 . 21)
  (45971 . 21)
  (65247 . 19)
  (27499 . 6)
  (19716 . 31)
  (17276 . 27)
  (37967 . 31)
  (51795 . 25)
  (4810 . 23)
  (1718 . 5)
  (60532 . 28)
  (24972 . 25)
  (56640 . 10)
  (40311 . 12)
  (31912 . 25)
  (47366 . 11)
  (4881 . 31)
  (34396 . 24)
  (28591 . 27)
  (20448 . 21)
  (18998 . 28)
  (41176 . 22)
  (44722 . 31)
  (46241 . 24)
  (26833 . 9)
  (62830 . 19)
  (59548 . 9)
  (27566 . 23)
  (50755 . 20)
  (42503 . 30)
  (453 . 18)
  (29412 . 21)
  (24463 . 0)
  (31529 . 5)
  (36271 . 21)
  (60204 . 3)
  (25095 . 12)
  (45968 . 0)
  (53310 . 3)
  (26752 . 1)
  (10977 . 13)
  (23001 . 15)
  (35156 . 11)
  (37224 . 7)
  (14593 . 18)
  (56100 . 4)
  (44366 . 5)
  (36155 . 21)
  (24005 . 14)
  (37358 . 0)
  (46461 . 12)
  (5375 . 8)
  (44541 . 31)
  (3595 . 21)
  (11044 . 0)
  (1400 . 6)
  (34536 . 17)
  (24432 . 15)
  (62774 . 9)
  (25681 . 10)
  (47152 . 29)
  (64009 . 2)
  (31962 . 2)
  (28962 . 0)
  (11751 . 18)
  (50691 . 13)
  (28562 . 20)
  (24618 . 31)
  (64903 . 13)
  (28757 . 7)
  (31255 . 2)
  (51190 . 11)
  (7139 . 25)
  (6340 . 20)
  (43345 . 5)
  (44096 . 16)
  (301 . 25)
  (43673 . 22)))

(define rand-8-8-8-8
  '((29472 . 16)
    (30597 . 11)
    (12014 . 29)
    (1666 . 27)
    (27099 . 9)
    (4917 . 11)
    (25663 . 24)
    (38182 . 11)
    (8113 . 2)
    (60658 . 14)
    (34984 . 10)
    (49540 . 0)
    (19300 . 29)
    (22419 . 19)
    (58714 . 11)
    (7922 . 7)
    (62545 . 16)
    (33723 . 14)
    (24250 . 30)
    (18290 . 8)
    (41981 . 2)
    (30153 . 18)
    (26179 . 25)
    (43422 . 14)
    (10562 . 6)
    (14465 . 11)
    (41301 . 6)
    (36802 . 21)
    (45963 . 13)
    (26409 . 29)
    (52844 . 1)
    (52066 . 29)
    (13928 . 1)
    (42877 . 30)
    (53879 . 22)
    (11668 . 18)
    (37971 . 12)
    (55272 . 25)
    (60893 . 17)
    (6553 . 21)
    (706 . 4)
    (58654 . 13)
    (39489 . 17)
    (63089 . 21)
    (23869 . 12)
    (15166 . 25)
    (47669 . 19)
    (13420 . 20)
    (27474 . 30)
    (62685 . 19)
    (7178 . 30)
    (35487 . 9)
    (8321 . 6)
    (3324 . 2)
    (52976 . 7)
    (1584 . 18)
    (20183 . 5)
    (61104 . 16)
    (524 . 19)
    (8946 . 8)
    (58382 . 25)
    (52922 . 23)
    (51275 . 18)
    (62172 . 27)
    (45326 . 6)
    (59576 . 11)
    (47713 . 3)
    (6640 . 29)
    (4007 . 6)
    (48823 . 12)
    (9452 . 21)
    (57874 . 19)
    (49492 . 27)
    (32007 . 26)
    (4675 . 4)
    (17118 . 27)
    (2765 . 8)
    (43040 . 10)
    (60585 . 28)
    (65463 . 9)
    (58654 . 5)
    (11561 . 26)
    (46782 . 11)
    (26208 . 6)
    (57979 . 12)
    (2324 . 1)
    (41732 . 29)
    (39201 . 1)
    (44588 . 29)
    (48760 . 0)
    (64047 . 23)
    (18991 . 1)
    (51400 . 9)
    (61166 . 27)
    (18245 . 2)
    (52687 . 20)
    (25608 . 12)
    (12923 . 25)
    (40660 . 28)
    (43465 . 18)
    (53395 . 16)
    (739 . 1)
    (15508 . 0)
    (14247 . 16)
    (45755 . 13)
    (27114 . 27)
    (4594 . 13)
    (5578 . 9)
    (28811 . 23)
    (31834 . 5)
    (1599 . 29)
    (26653 . 13)
    (58842 . 4)
    (26616 . 16)
    (22800 . 5)
    (47900 . 22)
    (11197 . 2)
    (35239 . 21)
    (45322 . 10)
    (47967 . 30)
    (15798 . 5)
    (33425 . 19)
    (32091 . 25)
    (64381 . 25)
    (15440 . 12)
    (40862 . 23)
    (8045 . 28)
    (58212 . 4)))

(define test-cases
  (let ((addr-block-pairs
         (match cache-lines
           ['(8 4 4) rand-8-4-4]
           ['(16 8 4 4) rand-16-8-4-4]
           ['(8 8 8 8) rand-8-8-8-8]
           [_ (begin
                (printf "Warning: no test case set is defined for configuration ~a!\n" cache-lines)
                '())])))
    (map (match-lambda ([cons x b] `(,(bv x word-size) ,b))) addr-block-pairs)))

; (println (mk-random-data 64))

; (define cutoffs (cumulative-sum cache-lines))
; (println (map length (group-by (compose (lambda (i) (get-block cutoffs i)) cdr) (mk-random-data 64))))

; (println (map length (group-by (compose (lambda (i) (get-block cutoffs i)) cdr) addr-block-pairs)))
