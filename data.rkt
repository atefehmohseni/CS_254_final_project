#lang racket

(provide test-cases)

(require "./config.rkt")
(require (only-in rosette/base/core/bitvector bv))

(define (cumulative-sum l)
  (reverse (foldl (lambda (next acc) (cons (+ next (if (null? acc) 0 (car acc))) acc)) '() l)))

(define (get-block weights i)
  (let ((cutoffs (cumulative-sum weights)))
    (index-where cutoffs (lambda (y) (> y i)))))

(define (mk-random-data n)
  (define maxi (expt 2 word-size))
  (build-list n (lambda (_) (cons (random maxi) (random total-cache-lines)))))

(define addr-block-pairs
  '((35212 . 3)
    (16242 . 9)
    (53474 . 10)
    (50550 . 1)
    (3817 . 6)
    (13097 . 4)
    (56578 . 1)
    (6661 . 7)
    (53494 . 9)
    (5830 . 7)
    (1911 . 13)
    (21823 . 9)
    (19560 . 6)
    (19749 . 14)
    (26616 . 12)
    (60014 . 11)
    (18870 . 5)
    (16321 . 9)
    (1987 . 3)
    (57136 . 9)
    (50031 . 0)
    (20612 . 12)
    (65449 . 14)
    (25785 . 0)
    (38372 . 4)
    (39437 . 10)
    (28855 . 1)
    (21296 . 9)
    (14382 . 7)
    (20229 . 8)
    (3468 . 15)
    (59819 . 7)
    (35915 . 2)
    (33276 . 7)
    (29053 . 4)
    (42504 . 5)
    (13168 . 3)
    (54904 . 4)
    (8282 . 7)
    (37963 . 4)
    (6603 . 6)
    (7912 . 15)
    (6273 . 1)
    (4376 . 12)
    (21462 . 5)
    (29716 . 0)
    (62691 . 3)
    (21890 . 7)
    (45417 . 14)
    (8261 . 14)
    (4449 . 13)
    (64061 . 1)
    (59739 . 13)
    (30913 . 15)
    (63041 . 4)
    (29832 . 3)
    (36389 . 9)
    (37807 . 8)
    (40971 . 8)
    (10915 . 9)
    (50148 . 0)
    (41099 . 10)
    (58154 . 14)
    (53826 . 11)))

(define test-cases
  (map (match-lambda ([cons x b] `(,(bv x word-size) ,b))) addr-block-pairs))

; (println (mk-random-data 64))
; (println (map length (group-by (compose (lambda (i) (get-block cache-lines i)) cdr) (mk-random-data 64))))
